timing: Fri Feb 14 02:19:02 PM UTC 2025 on Linode. 22:19 in China. New York 09:19.

market status to auto.

git pull
python setup.py to reset db or:
load training data:
mode = 'push'
python training_client.py


git pull changes from original repo

mdb duplicates. reset db?

server process mangement: persist process with pm2?

activate venv
pm2 start ranking_client.py --name ampy_ranking_client
pm2 start trading_client.py --name ampy_trading_client

run in background and can close terminal:
nohup python ranking_client.py &
end process:  kill 2794696
nohup python training_client.py &

issue: market status not updated if only running ranking_client.py

issue: ranking_client.py is logging to system.log file, not logging to ranking_client.log file

why sell half of position?


issue: if historical data doesn't change why would def simulate_strategy() action change? if others tickers sell, maybe create liquidity to buy more?

feature: fractional trading for small accounts.

feature: stats. avg trade duration.

PROBLEM with trading simulator holdings being out of sync.
2025-02-20 12:27:49 - INFO - Action: sell | Ticker: NFLX | Quantity: 1 | Price: 1042.86 | Strategy: MACDEXT_indicator
2025-02-20 12:27:52 - ERROR - Error in thread for NFLX, current_price = np.float64(1042.86), len(historical_data) = 90: 'NFLX'
2025-02-20 12:27:52 - ERROR - Traceback (most recent call last):
  File "C:\Users\pi\code\AmpyFin\ranking_client.py", line 122, in process_ticker
    action = simulate_trade(ticker, strategy, historical_data, current_price,
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\pi\code\AmpyFin\ranking_client.py", line 276, in simulate_trade
    if holdings_doc[ticker]["quantity"] == 0:
    ~~~~~~~~~~~~^^^^^^^^
KeyError: 'NFLX'
, MACDEXT_indicator. NFLX


=====

2025-02-20 14:54:07 - INFO - Action: sell | Ticker: GOOGL | Quantity: 1 | Price: 185.26 | Strategy: VAR_indicator
2025-02-20 14:54:08 - ERROR - Error in thread for GOOGL, current_price = np.float64(185.26), len(historical_data) = 501: 'GOOGL'
2025-02-20 14:54:08 - ERROR - Traceback (most recent call last):
  File "C:\Users\pi\code\AmpyFin\ranking_client.py", line 122, in process_ticker
    action = simulate_trade(ticker, strategy, historical_data, current_price,
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\pi\code\AmpyFin\ranking_client.py", line 276, in simulate_trade
KeyError: 'GOOGL'
, VAR_indicator. GOOGL


===
post market also change to batch? def update_portfolio_values(client)
Market status: closed
2025-02-20 08:59:26 - INFO - Market is closed. Performing post-market analysis.
2025-02-20 09:02:21 - INFO - Fetching individual latest price for MU
2025-02-20 09:02:22 - ERROR - Error fetching latest price for MU: Too Many Requests. Rate limited. Try after a while.
2025-02-20 09:02:22 - INFO - Fetching individual latest price for MU
2025-02-20 09:02:23 - ERROR - Error fetching latest price for MU: Too Many Requests. Rate limited. Try after a while.


===
2025-02-20 14:54:02 - ERROR - Error processing WBD: {"code":42210000,"message":"qty must be \u003e 1e-9"}

{
  "_id": {
    "$oid": "67b73e431e12bfa617aab588"
  },
  "symbol": "WBD",
  "quantity": 4.440892098500626e-16
}

2025-02-21 14:32:46 - ERROR - Error processing CDNS: '>' not supported between instances of 'Decimal128' and 'int'

2025-02-21 20:56:21 - ERROR - Error processing CDNS: 1 validation error for MarketOrderRequest
qty
  Input should be a valid number [type=float_type, input_value=Decimal128('0.185'), input_type=Decimal128]
    For further information visit https://errors.pydantic.dev/2.10/v/float_type



===== update prices from internet first?
def update_portfolio_values(client):
   """
   still need to implement.
   we go through each strategy and update portfolio value buy cash + summation(holding * current price)
   """
   try:
      df_current_prices = pd.read_csv('latest_prices.csv')
      logging.info(f"Loaded latest prices from 'latest_prices.csv'. {len(df_current_prices) = }")
   except Exception as e:
      logging.error(f"Error loading 'latest_prices.csv': {e}")
   